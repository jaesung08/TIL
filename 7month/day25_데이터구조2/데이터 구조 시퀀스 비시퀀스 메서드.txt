시퀸스 데이터구조
문자열 메서드
s.find(x) = x의 첫번째 위치를 반환. 없으면 -1을 반환
s.index(x) = x의 첫번째 위치를 반환. 없으면 오류발생 
s.isalpha() = 알파벳 문자 여부(유니코드 상 문자)
s.isupper() = 모두 대문자 여부
s.islower() = 모두 소문자 여부
s.istitle() = 타이틀 형식 여부 문자열이 제목 케이스 문자열이고 하나 이상의 문자가 있는 경우 True를 돌려줍니다. 
.replace(old, new[ ,count]) = 바꿀 대상 글자를 새로운 글자로 바꿔서 반환
.strip([chars]) = 문자열 양 끝의 공백 혹은 지정문자를 제거
.split( sep=None, maxsplit =1 ) = 지정한 문자를 구분자로 문자열을 분리하여 문자열의 리스트로 반환

capitalize
title
upper
swapcase

리스트 메서드
.append(x) = 리스트 마지막에 항목 x를 추가
.extend(ilterable) = 리스트에 다른 반복 가능한 객체의 모든 항목을 추가
.insert(i, x) = 리스트의 지정한 인덱스 i위치에 항목 x를 삽입
.remove(x) = 리스트에서 첫 번째로 일치하는 항목을 삭제
.pop(i) = 리스트에서 지정한 인덱스의 항목을 제거하고 반환 , 작성하지 않을 경우 마지막 항목을 제거
.clear = 리스트의 모든 항목 삭제
.index(x) = 리스트에서 첫 번째로 일치하는 항목의 인덱스를 반환
.sort() = 원본리스트를 오름차순으로 정렬
.reverse() = 리스트의 순서를 역순으로 변경(정렬 XXX)
반환하는 메서드는 대부분 원본이 변경되지 않고 list. 을 통해 값을 배출

비시퀸스 데이터구조
세트
.add(x) = 세트에 X를 추가
.clear = 세트의 모든 항목을 제거
.remove(x) = 세트에서 항목 x를 제거
.discard(x) = 세트 s에서 항목x를 제거. remove와 달리 없는 요소를 넣어도 에러가 없음
.pop( ) = 세트에서 임의의 요소를 제거하고 반환
.update(iterable) = 세트에 다른 iterable 요소를 추가
set1.difference(set2) // set1 - set2 = 차집합
set1.intersection(set2) // set1 & set2 =교집합
set1.issubset(set2) // set1 <= set2 = set1이 부분집합으로 완전히 속할 때
set1.issuperset(set2) // set1 >= set2 = set2가 부분집합으로 완전히 속할 때
set1.union(set2) // set1 | set2 = 합집합

딕셔너리
.clear( ) = 딕셔너리 D의 모든 키/ 값 쌍을 제거
.get(ket[ ,default]) = 키 연결된 값을 반환하거나 키가 없으면 None혹은 기본 값을 반환
.keys() = 딕셔너리 키를 모은 객체를 반환
.values( ) = 딕셔너리 값을 모은 객체를 반환
.items( ) = 딕셔너리 키/값 쌍을 모은 객체를 반환
.pop(key[ ,default]) = 키를 제거하고 연결됐던 값을 반환 ( 없으면 에러나 default 반환)
.setdefault(key[ ,default]) // get과 비슷하나 다름
= 키와 연결된 값을 반환, 키가 없다면 default와 연결환 키를 딕셔너리에 추가하고 default를 반환
.update([other]) = other가 제공하는 키/값 쌍으로 딕셔너리를 갱신, 기존 키는 덮어씀