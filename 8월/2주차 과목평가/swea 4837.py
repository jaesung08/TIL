'''
1부터 12까지의 숫자를 원소로 가진 집합 A가 있다. 집합 A의 부분 집합 중 N개의 원소를 갖고 있고, 원소의 합이 K인 부분집합의 개수를 출력하는 프로그램을 작성하시오.

해당하는 부분집합이 없는 경우 0을 출력한다. 모든 부분 집합을 만들어 답을 찾아도 된다.
 

예를 들어 N = 3, K = 6 경우, 부분집합은 { 1, 2, 3 } 경우 1가지가 존재한다.

 
 

[입력]
 

첫 줄에 테스트 케이스 개수 T가 주어진다.  ( 1 ≤ T ≤ 50 )
 

테스트 케이스 별로 부분집합 원소의 수 N과 부분 집합의 합 K가 여백을 두고 주어진다. ( 1 ≤ N ≤ 12, 1 ≤ K ≤ 100 )

 

[출력]
 

각 줄마다 "#T" (T는 테스트 케이스 번호)를 출력한 뒤, 답을 출력한다.
'''

T = int(input())  # 테스트 케이스 개수를 입력 받음

for tc in range(1, T + 1):  # 각 테스트 케이스마다 반복
    N, K = map(int, input().split())  # 원소의 개수 N과 원소의 합 K 입력
    arr = [i for i in range(1, 13)]  # 1부터 12까지의 숫자를 원소로 가진 리스트 arr 생성
    result = 0  # 가능한 부분 집합의 개수를 저장할 변수 초기화

    # 1 << 12는 이진수 1을 왼쪽으로 12비트 이동한 것이므로 2의 12승인 4096을 나타냄.
    # 0부터 4095까지의 모든 수를 이진수로 표현하면 각 비트는 arr 리스트의 원소에 대응됨.
    # 각 비트가 1인 경우 해당 인덱스의 원소를 부분 집합에 포함시킨다.
    for i in range(1 << 12):
        sum_sub = 0  # 부분 집합의 합을 저장할 변수 초기화
        subset = []  # 부분 집합을 저장할 리스트 초기화

        for j in range(12):
            # i의 j번째 비트가 1인지 아닌지 알 수 있음.
            # 12의 이진수 1100, 5의 이진수 0101 -> 1100 & 0101 => 0100
            if i & (1 << j):
                sum_sub += arr[j]  # 해당 인덱스의 원소를 부분 집합의 합에 더함
                subset.append(arr[j])  # 해당 인덱스의 원소를 부분 집합에 추가

        # 부분 집합의 개수가 N이고, 부분 집합의 합이 K인 경우 결과 변수를 1 증가시킴
        if len(subset) == N and sum_sub == K:
            result += 1

    print(f'#{tc} {result}')  # 결과 출력