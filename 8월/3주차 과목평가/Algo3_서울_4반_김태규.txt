Q1. 스택에 대해 간단히 설명하시오
스택이란 후입선출의 원리에 따라 작동하는 자료형이다.

스택의 대표적인 연산으로는 다음 네가지가 있다.
1. 값을 입력받아 스택에 추가하는 push
2. 스택의 가장 위 값의 인덱스를 나타내는 top
3. 스택의 가장 위의 값을 빼고 반환하는 pop
4. 스택 내 요소가 있는지 없는지 판단하는 is_empty

스텍은 다음과 같이 구현할 수 있다.
```
stack = [0]*(n)  # n은 스텍 길이 (스텍 오버플로우를 방지하기 위해 사전에 계산이 필요함)
top = -1

def push(num, stack):
    top += 1
    stack[top] = num

def pop(stack):
    if top != -1:
        top -= 1
        return stack[top+1]
    else:
        print('스택에 값이 없습니다.')

def top(stack):
    if top != -1:
        return stack[top]
    else:
        print('스택에 값이 없습니다.')

def is_empty(stack):
    if top != -1:
        return False
    else:
        return True
```

Q2. DFS에 대해 간단히 설명하시오.
DFS는 그래프와 같은 자료형을 탐색할 때 가장 깊은(시작 지점에서 가장 먼) 단계의 값부터 확인하도록 하는 방식이다.

DFS를 구현하기 위해서는 노드와 엣지에 대한 정보가 필요하고, array 혹은 dictionary 형태로 정리할 필요가 있다.
또한 방문기록과 함께 스택 혹은 재귀를 활용하여 구현할 수 있다.

구현 방법은 다음과 같다.
```
# 노드와 엣지에 대한 정보
node_num = 7
nodes = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 7), (4, 6), (5, 6), (6, 7)]

# 딕셔너리 형태로 정리
edges = {}                          # 값을 저장할 딕셔너리
for i in range(1, node_num + 1):    # 노드 당 할당할 엣지를 설정하기 위해 빈 리스트 형태로 생성
    edges[i] = []
for y, x in nodes:                  # 노드에 엣지를 할당
    edges[y].append(x)              # 유향그래프 일 경우 여기까지만 작성
    edges[x].append(y)              # 무향그래프 일 경우 양방향으로 작성

# 스택을 이용한 DFS 구현
def stack_DFS(graph, start):
    stack = [start]
    visited = set()

    while stack:
        now = stack.pop()
        print(now)                  # 탐색 순서대로 노드를 출력
        if now not in visited:
            visited.add(now)
            for i in graph[now]:
                if i not in visited:
                    stack.append(i)

# 재귀를 이용한 DFS 구현
visited = [False]*(n+1)

def recursion_DFS(graph, start):
    print(start)                    # 탐색 순서대로 노드를 출력
    visited[start] = True
    for next in graph[start]:
        if not visited[next]:
            recursion_DFS(graph, next)
```

Q3. 4번 정점부터 DFS를 시작하는 경우 방문 순서, 갈림길에서 어떤 선택을 했는지 설명
A. 4 2 1 3 7 6 5
위 방문 순서인 1 2 4 6 5 7 3 을 보면, 갈림길이 있는 경우, 더 낮은 숫자를 선택하여 간 것을 볼 수 있다.
따라서 같은 방식으로 4번 정점에서 DFS를 시작할 경우, 4 다음으로 2와 6 중에서 2가 먼저 오게 된다.
마찬가지로 2 다음으로 1과 5 중에서 1이 먼저 오게 되고,
그 이후에는 방문 기록이 없고, 더 깊은 방향으로 가는 3 7 6 5 가 순서대로 오게 된다.
