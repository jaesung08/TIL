7.17 
# 프로그램 - 명령어들의 집합

* 친구에게 우리집으로 오는길을 적어준것- 프로그램 작성
* 적어준길을 순서대로 따라가는것 - 프로그램 실행
* ~~에서 우회전, 두 블록 직진 후 좌회전 등으로 구성- 몇가지 기초연산으로 구성됌
* 컴퓨터는더 다양한 연산 집합을 가질 수 있음 
=> 기존 연산을 사용해 더 많은 연산을 만들고 차곡차곡 쌓아 새로운 연산을 만들어냄

### 프로그래밍의 핵심
* 새연산을 정의하고 조합해서 유용한 작업을 수행하는것.
* **문제를 해결하기**위한 도구

### 파이썬 사용이유
* 간결하고 읽기쉬움
* 다양한 응용분야
* * 데이터 분석, 인공지능, 웹개발, 자동화 등
* 파이썬 커뮤니티의 지원
* * 세계적인 규모의 사용자로 생태계가 유지

* 컴퓨터는 기계어(0과 1)만 사용하나, 사람은 기계어 작성이 어려움.
=> 인터프리터를이용하여 명령어를 기계어로 바꿈.
* * 훨씬 사용하기 쉽고, 운영체제간 이식도 가능(확장성)
* shell을 사용하여 명령어 하나씩 사용
* 확장자가 .py인 파일에 작성된 파이썬 프로그램 실행

### 파이썬의 구성
* 표현식 = 값, 변수, 연산자 등을 조합하여 계산되고 결과를 도출하는 코드 구조
* 평가(evaluate) = 표현식이나 문장을 실행하여 그 결과를 계산하고 값을 결정하는 과정
* =>표현식이나 문장을 순차적으로 평가하여 프로그램의 동작을 결정
* 문장(statement) = 실행가능한 동작을 기술하는 코드(조건문, 반복문, 함수정의 등)
* 문장이 여러개의 표현식을 포함함
* 타입 = 값이 어떤종류의 데이터인지 어떻게 해석되고 처리 되어야하는지 정의
* => 값(피연산자)과 연산자 2가지로 분류
* 데이터 타입
* * Numeric Type = 정수(int), 실수(float)
* * set type = set
* * sequence type = list, tuple, range
* * text sequence type = str(문자열)
* * mapping type = dict
* * 기타 = none, boolean, functions

* 산술 연산자(우선순위 순)
* * ** 지수(제곱)
* * - 음수부호
* * * 곱셈
* * / 나눗셈
* * // 몫
* * % 나머지
* * + 덧셈
* * - 뺼셈

### 변수
* 변수(variable) = 값을 참조하는 이름
* * 할당문을 통해 변수에 값을 할당(변수명=값)
#### 변수명규칙
* * 영문알파벳,언더스코어( _ ), 숫자로 구성
* * 숫자로 시작불가
* * 대소문자를 구분
* * 파이썬 내부 예약어는 사용불가
* * * false, None, True, and, as, assert, async, await, break, class, continue, def, del, elif, else, except, finally, for, from, global, if, import, in, is, lambda, nonlocal, not, or, pass, raise, return, try, while, with, yield, __peg_parser__

* 모든 메모리에는 고유주소가 존재
* 객체(object) = 타입을 갖는 메모리 주소 내 값
* => 값이 들어있는 상자
* 변수에 참조하는 메모리 주소를 가지게 하고 고유 메모리주소에는 객체(값)을 저장

### 스타일 가이드
* 코드의 일관성과 가독성을 위한 규칙과 권장사항들의 모음
* * 변수명은 무엇을 위한 변수인지 직관적인 이름을 가져야한다.
* * 공백4칸을 사용하여 코드블록 들여쓰기(tab사용은 에디터가 변환해줬기때문에 사용가능)
* * 한줄의 길이는 79자로 제한, 길어지면 줄바꿈 사용
* * 문자와 밑줄(_)을 사용하여 함수,변수,속성의 이름 작성( 밑줄 쓴것을 snake_case 라 칭함)
* * 함수 정의나 클래스 정의 등의 블록사이에는 빈 줄 추가( 2줄을 권장)
* * pep8 사이트에서 파이썬 가이드 참고
* * 파이썬튜터 참고

### 주석
* 프로그램 코드내에 작성되는 설명이나 메모
* 인터프리터에 의해 실행되지않음
* # 을 사용하여 작성
* """	""" 여러줄 주석용으로 사용 => 보통 설명문 넣을떄 사용
* 코드의 특정부분을 설명할 때
* 임시로 코드를 비활성화할 때
* 코드를 이해하거나 문서화할 때
* 다른 개발자나 자신에게 코드의 의도나 동작을 설명할 때



