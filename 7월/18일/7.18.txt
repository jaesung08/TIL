# 7.18
## Data Types
* 값의 종류와 그 값에 적용 가능한 **연산과 동작을 결정** 하는 속성
    * Numeric Type = 정수(int), 실수(float), complex(복소수)
    * set type = set, dict
    * sequence type = list, tuple, range
    * text sequence type = str(문자열)
    * mapping type = dict
    * 기타 = none, boolean, functions
    * **리스트, 튜플, 딕션너리 의 차이점을 잘알아야함**

* 데이터 타입이 필요한 이유
    * 값들을 구분하고 어떻게 다뤄야 하는지 알 수 있음.
    * 각 데이터 값에 적합한 도구를 가짐
    * 타입을 명시적으로 지정하여, 코드를 읽는 사람이 변수의 의도를 더 쉽게 이해하고, 잘못된 데이터 타입의 오류를 미리 예방

## Numeric Type
### int = 정수 자료형
    * 2진수(binary) = 0b    [print(0b10) #2]
    * 8진수(octal) = 0o     [print(0x30) #24]
    * 16진수(hexadeciaml) = 0x     [print(0x10) #16]

    * print(bin(12))	= 0b1100
    * print(oct(12))	= 0o14
    * print(hex(12))	= 0xc

### float = 실수 자료형(실수에 대한 근삿값)
    * 유한 정밀도
         * 0.66666666666666666 = 2/3에 대한 근삿값
         * 1.66666666666666667 = 5/3에 대한 근삿값
         * 컴퓨터는 2진수를 쓰기 때문에 0.1을 2진수로 표현하면 무한대로 반복
         * => 무한대숫자를 표현 할수 없어 10진법의 근사값을 표시
         * 이런 증상을 floating point rounding error 라고 함
    * 실수 연산 시 해결책
         * 1. 임의의 작은 수 활용
         * 2. math 모듈 활용
         * 사진 1
    * 지수 표현 방식
         * 314 * 0.01 = 314e - 2 = 314**(-2)
         * e = 10^
  
## Sequence Type = 여러개의 값들을 **순서대로 나열** 하여 저장하는 자료형
    * ( str, list, tuple, range )
    * 순서(sequence) = 값들이 순서대로 저장 (정렬XXX)
    * 인덱싱(indexing) = 각 값에 고유인덱스(번호)를 가지고 있어, 인덱스를 사용하여 특정 위치 값을 선택하거나 수정할 수 있음
    * 슬라이싱(slicing) = 인덱스 범위를 조절해 부분적인 값을 추출 가능
    * 길이(legnth) =  len()함수를 사용하여 저장된 값의 갯수(길이)를 구할 수 있음
    * 반복(lteration) = 반복문을 사용하여 저장된 값들을 반복적으로 처리 가능
    * 5가지 모두 사용가능하고 가변,불변에 따라 나눌수 있음

### str = 문자열( **불변** 시퀸스자료형 )
* 문자열은 여러 문자의 조합
* 작은 따옴표(') 또는 큰따옴표(") 으로 감싸서 표현 
     * 중첩따옴표 => 작은 따옴표 안에 큰따옴표로 표현, 큰따옴표 안에 작은 따옴포로 표현
     *   " 가나다라마바사'아자차카'타파하"
* 역슬래시를 사용하여 특수한 기능 사용
     * \n = 줄바꿈
     * \t = 문자 사이 탭 삽입
     * \\ = 백슬래시
     * \' = 작은 따옴표
     * \" = 큰따옴표
         * print( '철수야 \' 안녕 \' ' ) = 철수야 '안녕'

* string Interpolation = 문자열 내 변수나 표현식을 삽입하는 방법
     * f-string = f 또는 F 접두어를 붙이고 표현식을 {expression}으로 작성하여 문자열에 파이썬 표현식의 값을 삽입함.
     * print(f'Debugging {bugs} {counts} {area}')  => {} 자리에 각 변수에 입력된 값이 출력
     * (이전에는 .format 이라는 함수를 사용 하였으나 최근에는 f-string 사용)
     * (더 이전에는 %s, %d, %f 등을 사용했음 )
     * 인덱싱 = 그 자리의 요소 찾아오기 //  슬라이싱 = 그 사이의 자리 요소 찾아오기 // 길이 = 요소의 갯수
     * 사진2

* 인덱스 = 시퀀스 내의 값들에 대한 고유 번호, 각 값의 위치를 식별
     * 사진 3

* 슬라이싱 = 시퀸스의 일부범위를 추출하여 새로운 시퀸스를 생성
    * 사진 4
    * 슬라이싱 범위의 마지막은 예외
    * [ :3] 이라면 처음부터 3까지 // 처음이라는 값은 작성X
    * [3: ] 이라면 3부터 마지막 까지 // 마지막 또한 마찬가지
    * 마지막에 -1 은 시작지점이 0이라는 인덱스의 특성을 고려한것이다 !
    * 사진 5
    * [0:5:2] 0부터5까지 (step)2칸씩 추출
    * [ : : -1] step을 음수로 추출할 시 거꾸로 읽혀 hello가 olleh로 추출 => **문자열 뒤집기**
=> 문자열은 불변입니다. 잊지마세요. 필요하면 새로운 문자열을 만들기.

### list = **가변** 시퀸스 자료형
* 리스트는 0개 이상의 객체 포함하여 데이터 목록 저장 // 빈 리스트가 가능
* 대괄호( [ ] )로 표시
* 어떠한 자료형도 저장할 수 있음
    * [ 1, 2, 3 'pyhthon' , ['hello', 'world' , '!!!']] => 5개의 자료

* 중첩된 리스트의 접근
    * 사진 6
    * [4][-1] 4번째 인덱스의 -1 즉 문자열의 마지막 값 '!!!' 출력
    * [-1][1][0] 3단계를 걸쳐 w 출력

* 가변형 !! 인덱스를 호출하여 다른 값을 입력가능 
    * 사진7

### Tuple = 불변 시퀸스 자료형
* 0개 이상의 객체 포함 // 빈 튜플 가능
* 소괄호로( () )로 표시
* 어떤 자료형도 저장 가능
* 하나의 자료형만 있어도 (1, ) 으로 " , " 를 사용해야함

* 리스트와 유사하나 불변 데이터 자료형
    * => 개발자가 쓰기보다는 **파이썬의 내부 동작**에서 사용됌
* 여러개의 값을 할당하여 그룹화 할때 사용
    * x, y =(10, 20)  이럴 때 사용
    * => 개발자가 쓰일이 없기 때문에 크게 의식하지 않아도 됌

### range = 연속된 정수 시퀀스를 생성하는 불변 자료형
* range(n) 
    * 0부터 n-1까지의 숫자 시퀀스
* range(n,m)
     * n 부터 m-1까지의 숫자 시퀀스
* 마지막에 -1 은 시작지점이 0이라는 인덱스의 특성을 고려한것이다 !
* range(n,m,s)
     * n 부터 m-1까지 s마다 건너뛴 숫자 시퀸스

*  사진 8 
    * 리스트를 활용하여 값을 활용함

## Non-Sequence Types

### dict = 딕셔너리 (순서와 중복이 없는 가변 자료형) 
* Key : value 의 세트 형태
    * key는 불변형 자료형만 사용가능(str, int, float, tuple, range ...)
    * value는 모든 자료형 사용가능
* 중괄호 ( {} )로 표기
* 사진9
    * Key를 활용하여 value에 접근 // 대괄호 ( [] )를 활용하여 값을 추출
    * 가변형이기에 키를 활용해 value값 변경 가능

### set = 세트 ( 순서와 중복이 없는 가변 자료형)
* 수학에서의 집합이라 보면 됌
* 중괄호 ( {} )로 표기
* 빈 자료형은 꼭 "set( )" 로 표기 해야함 ( 딕셔너리와 겹치기 때문 )
* 사진10
    * 수학의 집합과 똑같은 연산
    * | 합집합 // - 차집합 // & 교집합 // 
    * 튜플과 같이 조금 독특하다

## Other Types
### None = 값이 없을 표현하는 자료형
* 0이랑은 다르게 정말 값이 없다 라는 것을 표현

### boolean = 참과 거짓을 표현하는 자료형
* True 와 False
* 비교 / 논리 연산의 평과 결과로 사용
* 주로 조건/ 반복문과 함께 사용
* 사진 11

### collection = 여러개의 항목을 담는 자료구조
* str, list, tuple, set, dict
* 사진12
    * 불변/가변과 순서 여부에 따라 나눠진다
    * range는 무의미하다용 
* 불변과 가변의 차이
    * 불변은 하나의 메모리 주소에 할당해서 바꿀수없다
    * 가변은 각각의 메모리 주소에 하나의 값을 할당하기 때문에 바꿀 수 있다.
    * 하여 **리스트를 객체의 참조를 모아놓은 컬렉션** 이라 칭함
"""
List_1 = [1, 2, 3,]
List_2 = List_1

List_1[0] = 100
print(List_1) # [100, 2, 3]
print(List_2) # [100, 2, 3]
"""
* 리스트는 같은 곳을 복사하여 변환시키지 않아도 똑같아짐 // 프레임은 다르나 객체를 공유하게 되기 때문이다.

## Type Conversion = 형변환
### lmplicit Type Conversion = 암시적 형 변환
* Boolean과 Numeric Type에서만 가능 
* 사진 13

### Explicit Type Conversion = 명시적 형변환
